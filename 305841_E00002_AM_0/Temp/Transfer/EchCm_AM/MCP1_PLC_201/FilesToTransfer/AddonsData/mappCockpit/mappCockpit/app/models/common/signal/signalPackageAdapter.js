define(["require", "exports", "../../../common/packageConversion/enum/objectTypeEnum", "../../../common/persistence/settings", "../../../common/packageConversion/enum/dataTypeEnum", "../../../common/packageConversion/enum/additionalMetaKeys", "../../../common/packageConversion/mceConversionError", "./settingIds", "../../../common/packageConversion/enum/arrayTypeEnum", "../../../common/packageConversion/meta", "../../../common/packageConversion/package"], function (require, exports, objectTypeEnum_1, settings_1, dataTypeEnum_1, additionalMetaKeys_1, mceConversionError_1, settingIds_1, arrayTypeEnum_1, meta_1, package_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DataIds;
    (function (DataIds) {
        DataIds["Name"] = "name";
        DataIds["XValues"] = "xValues";
        DataIds["YValues"] = "yValues";
    })(DataIds || (DataIds = {}));
    var SignalPackageAdapter = /** @class */ (function () {
        function SignalPackageAdapter() {
            //newest version of the package format
            this.currentPackageVersion = 1;
            this.settingsType = "Signal";
            this.objectType = objectTypeEnum_1.ObjectType.SIGNAL;
        }
        SignalPackageAdapter.prototype.packageToSetting = function (packageData, container) {
            var _a, _b, _c;
            var setting = new settings_1.Settings(this.settingsType);
            if (((_a = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _a === void 0 ? void 0 : _a.dataType) == dataTypeEnum_1.DataType.OBJECT && ((_b = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _b === void 0 ? void 0 : _b[additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE]) == this.objectType) {
                switch ((_c = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _c === void 0 ? void 0 : _c[additionalMetaKeys_1.AdditionalMetaKeys.VERSION]) {
                    case 1:
                        setting = this.packageV1ToSetting(packageData, container);
                        break;
                    default:
                        throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.objectType);
                }
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_TYPE, this.objectType);
            }
            return setting;
        };
        SignalPackageAdapter.prototype.packageV1ToSetting = function (packageData, container) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
            var setting = new settings_1.Settings(this.settingsType);
            var xValues = new Array();
            var yValues = new Array();
            var points = new Array();
            if (((_c = (_b = (_a = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _a === void 0 ? void 0 : _a[DataIds.Name]) === null || _b === void 0 ? void 0 : _b.meta) === null || _c === void 0 ? void 0 : _c.dataType) == dataTypeEnum_1.DataType.STRING) {
                setting.setValue(settingIds_1.SettingIds.Name, (_e = (_d = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _d === void 0 ? void 0 : _d[DataIds.Name]) === null || _e === void 0 ? void 0 : _e.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.Name);
            }
            if (((_h = (_g = (_f = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _f === void 0 ? void 0 : _f[DataIds.XValues]) === null || _g === void 0 ? void 0 : _g.meta) === null || _h === void 0 ? void 0 : _h.dataType) == dataTypeEnum_1.DataType.ARRAY && ((_l = (_k = (_j = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _j === void 0 ? void 0 : _j[DataIds.XValues]) === null || _k === void 0 ? void 0 : _k.meta) === null || _l === void 0 ? void 0 : _l[additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE]) == arrayTypeEnum_1.ArrayType.NUMBER) {
                xValues = (_o = (_m = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _m === void 0 ? void 0 : _m[DataIds.XValues]) === null || _o === void 0 ? void 0 : _o.data;
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.XValues);
            }
            if (((_r = (_q = (_p = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _p === void 0 ? void 0 : _p[DataIds.YValues]) === null || _q === void 0 ? void 0 : _q.meta) === null || _r === void 0 ? void 0 : _r.dataType) == dataTypeEnum_1.DataType.ARRAY && ((_u = (_t = (_s = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _s === void 0 ? void 0 : _s[DataIds.YValues]) === null || _t === void 0 ? void 0 : _t.meta) === null || _u === void 0 ? void 0 : _u[additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE]) == arrayTypeEnum_1.ArrayType.NUMBER) {
                yValues = (_w = (_v = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _v === void 0 ? void 0 : _v[DataIds.YValues]) === null || _w === void 0 ? void 0 : _w.data;
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.YValues);
            }
            if (xValues.length !== yValues.length) {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, "Length of " + DataIds.XValues + " does not match length of " + DataIds.YValues);
            }
            setting.setValue(settingIds_1.SettingIds.RawPointsX, xValues);
            setting.setValue(settingIds_1.SettingIds.RawPointsY, yValues);
            return setting;
        };
        SignalPackageAdapter.prototype.settingToPackage = function (settingsData) {
            var settings = settings_1.Settings.create(settingsData);
            var signalData = {};
            var packageStructure = {
                packages: new Array(),
                topLevelID: NaN
            };
            if (settings.type === this.settingsType) {
                var id = meta_1.Meta.createID();
                var additionalMetaInfo = [{ key: additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE, value: this.objectType }, { key: additionalMetaKeys_1.AdditionalMetaKeys.ID, value: id }, { key: additionalMetaKeys_1.AdditionalMetaKeys.VERSION, value: this.currentPackageVersion }];
                var signalMeta = new meta_1.Meta(dataTypeEnum_1.DataType.OBJECT, additionalMetaInfo);
                var nameData = settings.getValue(settingIds_1.SettingIds.Name);
                if (nameData !== undefined) {
                    signalData[DataIds.Name] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.STRING), nameData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.Name);
                }
                // suport for old points definition (new definition is RawPointsX and RawPointsY)
                var pointData = settings.getValue("points");
                if (pointData !== undefined) {
                    signalData[DataIds.XValues] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.ARRAY, [{ key: additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE, value: arrayTypeEnum_1.ArrayType.NUMBER }]), pointData.map(function (s) { return Number(s.split(";")[0]); }));
                    signalData[DataIds.YValues] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.ARRAY, [{ key: additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE, value: arrayTypeEnum_1.ArrayType.NUMBER }]), pointData.map(function (s) { return Number(s.split(";")[1]); }));
                }
                else {
                    var rawPointsX = settings.getValue(settingIds_1.SettingIds.RawPointsX);
                    if (rawPointsX !== undefined) {
                        signalData[DataIds.XValues] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.ARRAY, [{ key: additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE, value: arrayTypeEnum_1.ArrayType.NUMBER }]), rawPointsX.map(function (s) { return s; }));
                    }
                    else {
                        throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.RawPointsX);
                    }
                    var rawPointsY = settings.getValue(settingIds_1.SettingIds.RawPointsY);
                    if (rawPointsY !== undefined) {
                        signalData[DataIds.YValues] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.ARRAY, [{ key: additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE, value: arrayTypeEnum_1.ArrayType.NUMBER }]), rawPointsY.map(function (s) { return s; }));
                    }
                    else {
                        throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.RawPointsY);
                    }
                }
                var signalPackage = new package_1.Package(signalMeta, signalData);
                packageStructure.packages.push(signalPackage);
                packageStructure.topLevelID = id;
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.settingsType);
            }
            return packageStructure;
        };
        return SignalPackageAdapter;
    }());
    exports.SignalPackageAdapter = SignalPackageAdapter;
});
//# sourceMappingURL=data:application/json;base64,