define(["require", "exports", "../../../common/packageConversion/enum/objectTypeEnum", "../../../common/persistence/settings", "../../../common/packageConversion/enum/dataTypeEnum", "../../../common/packageConversion/enum/additionalMetaKeys", "../../../common/packageConversion/mceConversionError", "../../../common/packageConversion/meta", "../../../common/packageConversion/package", "./settingIds"], function (require, exports, objectTypeEnum_1, settings_1, dataTypeEnum_1, additionalMetaKeys_1, mceConversionError_1, meta_1, package_1, settingIds_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DataIds;
    (function (DataIds) {
        DataIds["TimeCursorStates"] = "timeCursorStates";
        DataIds["FrequencyCursorStates"] = "frequencyCursorStates";
        DataIds["Position"] = "position";
        DataIds["Active"] = "active";
    })(DataIds || (DataIds = {}));
    /**
     * Handles the conversion of CursorStates data between Settings and package formats.
     *
     * @class CursorStatesPackageAdapter
     * @implements {IPackageAdapter}
     */
    var CursorStatesPackageAdapter = /** @class */ (function () {
        /**
         * Creates an instance of CursorStatesPackageAdapter.
         * Sets settings and object type.
         *
         * @memberof CursorStatesPackageAdapter
         */
        function CursorStatesPackageAdapter() {
            //newest version of package format
            this.currentPackageVersion = 1;
            //CursorState ObjectType (not a seperate adapter)
            this.cursorStateDataObjectType = "cursorstatedata";
            this.settingsType = "CursorStates";
            this.objectType = objectTypeEnum_1.ObjectType.CURSORSTATES;
        }
        /**
         * Converts CursorStates data from package to Settings format (import).
         *
         * @param {IPackage} packageData
         * @param {ExportContainer} container
         * @returns {ISettings}
         * @memberof CursorStatesPackageAdapter
         */
        CursorStatesPackageAdapter.prototype.packageToSetting = function (packageData, container) {
            var _a, _b, _c;
            var setting = new settings_1.Settings(this.settingsType);
            //version selection
            if (((_a = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _a === void 0 ? void 0 : _a.dataType) == dataTypeEnum_1.DataType.OBJECT && ((_b = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _b === void 0 ? void 0 : _b[additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE]) == this.objectType) {
                switch ((_c = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _c === void 0 ? void 0 : _c[additionalMetaKeys_1.AdditionalMetaKeys.VERSION]) {
                    case 1:
                        setting = this.packageV1ToSetting(packageData, container);
                        break;
                    default:
                        throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.objectType);
                }
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_TYPE, this.objectType);
            }
            return setting;
        };
        /**
         * Converts CursorStates data from package format in version 1 to settings format (import).
         *
         * @private
         * @param {IPackage} packageData
         * @param {ExportContainer} container
         * @returns {ISettings}
         * @memberof CursorStatesPackageAdapter
         */
        CursorStatesPackageAdapter.prototype.packageV1ToSetting = function (packageData, container) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
            var setting = new settings_1.Settings(this.settingsType);
            // get cursorstates of time cursors from package and set them to the settings object
            if (((_c = (_b = (_a = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _a === void 0 ? void 0 : _a[DataIds.TimeCursorStates]) === null || _b === void 0 ? void 0 : _b.meta) === null || _c === void 0 ? void 0 : _c.dataType) == dataTypeEnum_1.DataType.ARRAY && ((_f = (_e = (_d = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _d === void 0 ? void 0 : _d[DataIds.TimeCursorStates]) === null || _e === void 0 ? void 0 : _e.meta) === null || _f === void 0 ? void 0 : _f[additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE]) == this.cursorStateDataObjectType) {
                var timeCursorStatesArray = (_h = (_g = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _g === void 0 ? void 0 : _g[DataIds.TimeCursorStates]) === null || _h === void 0 ? void 0 : _h.data;
                setting.setValue(settingIds_1.SettingIds.TimeCursorPositions, timeCursorStatesArray.map(function (cursorState) { return cursorState.position; }));
                setting.setValue(settingIds_1.SettingIds.TimeCursorActiveState, timeCursorStatesArray.map(function (cursorState) { return cursorState.active; }));
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.TimeCursorStates);
            }
            // get cursorstates of frequency cursors from package and set them to the settings object
            if (((_l = (_k = (_j = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _j === void 0 ? void 0 : _j[DataIds.FrequencyCursorStates]) === null || _k === void 0 ? void 0 : _k.meta) === null || _l === void 0 ? void 0 : _l.dataType) == dataTypeEnum_1.DataType.ARRAY && ((_p = (_o = (_m = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _m === void 0 ? void 0 : _m[DataIds.FrequencyCursorStates]) === null || _o === void 0 ? void 0 : _o.meta) === null || _p === void 0 ? void 0 : _p[additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE]) == this.cursorStateDataObjectType) {
                var fftCursorStatesArray = (_r = (_q = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _q === void 0 ? void 0 : _q[DataIds.FrequencyCursorStates]) === null || _r === void 0 ? void 0 : _r.data;
                setting.setValue(settingIds_1.SettingIds.FftCursorPositions, fftCursorStatesArray.map(function (cursorState) { return cursorState.position; }));
                setting.setValue(settingIds_1.SettingIds.FftCursorActiveState, fftCursorStatesArray.map(function (cursorState) { return cursorState.active; }));
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.FrequencyCursorStates);
            }
            return setting;
        };
        /**
         * Merges arrays containing CursorPosition and CursorActivateState into one.
         *
         * @private
         * @param {Array<number>} cursorPositionArray
         * @param {Array<boolean>} cursorActiveStateArray
         * @returns {Array<CursorStateDataObject>}
         * @memberof CursorStatesPackageAdapter
         */
        CursorStatesPackageAdapter.prototype.buildcursorStateDataObjectArray = function (cursorPositionArray, cursorActiveStateArray) {
            var cursorStateDataObjectArray = new Array();
            for (var i = 0; i < cursorPositionArray.length && i < cursorActiveStateArray.length; i++) {
                var cursorStateDataObject = {};
                cursorStateDataObject[DataIds.Position] = cursorPositionArray[i];
                cursorStateDataObject[DataIds.Active] = cursorActiveStateArray[i];
                cursorStateDataObjectArray.push(cursorStateDataObject);
            }
            return cursorStateDataObjectArray;
        };
        /**
         * Converts CursorStates data from settings to package format (export).
         *
         * @param {ISettings} settingsData
         * @returns {PackageArrayWithTopLevelID}
         * @memberof CursorStatesPackageAdapter
         */
        CursorStatesPackageAdapter.prototype.settingToPackage = function (settingsData) {
            var settings = settings_1.Settings.create(settingsData);
            var seriesData = {};
            var packageStructure = {
                packages: new Array(),
                topLevelID: NaN
            };
            if (settings.type === this.settingsType) {
                var id = meta_1.Meta.createID();
                var additionalMetaInfo = [{ key: additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE, value: this.objectType }, { key: additionalMetaKeys_1.AdditionalMetaKeys.ID, value: id }, { key: additionalMetaKeys_1.AdditionalMetaKeys.VERSION, value: this.currentPackageVersion }];
                var seriesMeta = new meta_1.Meta(dataTypeEnum_1.DataType.OBJECT, additionalMetaInfo);
                // get cursorstates of time cursors from setting and set them to the package object
                var timeCursorPositionData = settings.getValue(settingIds_1.SettingIds.TimeCursorPositions);
                var timeCursorActiveStateData = settings.getValue(settingIds_1.SettingIds.TimeCursorActiveState);
                if (timeCursorPositionData !== undefined && timeCursorActiveStateData !== undefined) {
                    var timeCursorStateDataObject = this.buildcursorStateDataObjectArray(timeCursorPositionData, timeCursorActiveStateData);
                    seriesData[DataIds.TimeCursorStates] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.ARRAY, [{ key: additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE, value: this.cursorStateDataObjectType }]), timeCursorStateDataObject);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.TimeCursorPositions);
                }
                // get cursorstates of frequency cursors from setting and set them to the package object
                var frequencyCursorPositionData = settings.getValue(settingIds_1.SettingIds.FftCursorPositions);
                var frequencyCursorActiveStateData = settings.getValue(settingIds_1.SettingIds.FftCursorActiveState);
                if (frequencyCursorPositionData !== undefined && frequencyCursorActiveStateData !== undefined) {
                    var frequencyCursorStateDataObject = this.buildcursorStateDataObjectArray(frequencyCursorPositionData, frequencyCursorActiveStateData);
                    seriesData[DataIds.FrequencyCursorStates] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.ARRAY, [{ key: additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE, value: this.cursorStateDataObjectType }]), frequencyCursorStateDataObject);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.FftCursorPositions);
                }
                var seriesPackage = new package_1.Package(seriesMeta, seriesData);
                packageStructure.packages.push(seriesPackage);
                packageStructure.topLevelID = id;
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.settingsType);
            }
            return packageStructure;
        };
        return CursorStatesPackageAdapter;
    }());
    exports.CursorStatesPackageAdapter = CursorStatesPackageAdapter;
});
//# sourceMappingURL=data:application/json;base64,