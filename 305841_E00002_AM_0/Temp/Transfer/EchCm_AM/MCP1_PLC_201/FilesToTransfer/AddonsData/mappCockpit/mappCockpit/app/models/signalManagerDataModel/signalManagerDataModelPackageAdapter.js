define(["require", "exports", "../../common/packageConversion/enum/objectTypeEnum", "../../common/packageConversion/exportContainer", "../../common/persistence/settings", "../../common/packageConversion/enum/dataTypeEnum", "../../common/packageConversion/enum/additionalMetaKeys", "../../common/packageConversion/mceConversionError", "../../common/packageConversion/enum/arrayTypeEnum", "../../common/packageConversion/meta", "../../common/packageConversion/package"], function (require, exports, objectTypeEnum_1, exportContainer_1, settings_1, dataTypeEnum_1, additionalMetaKeys_1, mceConversionError_1, arrayTypeEnum_1, meta_1, package_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DataIds;
    (function (DataIds) {
        DataIds["Categories"] = "categories";
    })(DataIds || (DataIds = {}));
    var SignalManagerDataModelPackageAdapter = /** @class */ (function () {
        function SignalManagerDataModelPackageAdapter() {
            //newest version of the package format
            this.currentPackageVersion = 1;
            //define settings key for value categories as there is no SettingIds object provided
            this.categoriesSettingsKey = "categories";
            this.settingsType = "SignalManagerDataModel";
            this.objectType = objectTypeEnum_1.ObjectType.SIGNALMANAGERDATAMODEL;
        }
        SignalManagerDataModelPackageAdapter.prototype.packageToSetting = function (packageData, container) {
            var _a, _b, _c;
            var setting = new settings_1.Settings(this.settingsType);
            if (((_a = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _a === void 0 ? void 0 : _a.dataType) == dataTypeEnum_1.DataType.OBJECT && ((_b = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _b === void 0 ? void 0 : _b[additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE]) == this.objectType) {
                switch ((_c = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _c === void 0 ? void 0 : _c[additionalMetaKeys_1.AdditionalMetaKeys.VERSION]) {
                    case 1:
                        setting = this.packageV1ToSetting(packageData, container);
                        break;
                    default:
                        throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.objectType);
                }
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_TYPE, this.objectType);
            }
            return setting;
        };
        SignalManagerDataModelPackageAdapter.prototype.packageV1ToSetting = function (packageData, container) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            var setting = new settings_1.Settings(this.settingsType);
            if (((_c = (_b = (_a = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _a === void 0 ? void 0 : _a[DataIds.Categories]) === null || _b === void 0 ? void 0 : _b.meta) === null || _c === void 0 ? void 0 : _c.dataType) === dataTypeEnum_1.DataType.ARRAY && ((_f = (_e = (_d = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _d === void 0 ? void 0 : _d[DataIds.Categories]) === null || _e === void 0 ? void 0 : _e.meta) === null || _f === void 0 ? void 0 : _f[additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE]) === arrayTypeEnum_1.ArrayType.LINK) {
                var categorySettingsArray_1 = new Array();
                var categoriesData = (_h = (_g = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _g === void 0 ? void 0 : _g[DataIds.Categories]) === null || _h === void 0 ? void 0 : _h.data;
                if (categoriesData !== undefined) {
                    categoriesData.forEach(function (id) {
                        var categorySetting = container.getSettingsByID(id);
                        if (categorySetting !== null) {
                            categorySettingsArray_1.push(categorySetting);
                        }
                        else {
                            throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.Categories);
                        }
                    });
                    setting.setValue(this.categoriesSettingsKey, categorySettingsArray_1);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.Categories);
                }
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.Categories);
            }
            return setting;
        };
        SignalManagerDataModelPackageAdapter.prototype.settingToPackage = function (settingsData) {
            var _this = this;
            var settings = settings_1.Settings.create(settingsData);
            var signalManagerDataModelData = {};
            var packageStructure = {
                packages: new Array(),
                topLevelID: NaN
            };
            if (settings.type === this.settingsType) {
                var id = meta_1.Meta.createID();
                var additionalMetaInfo = [{ key: additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE, value: this.objectType }, { key: additionalMetaKeys_1.AdditionalMetaKeys.ID, value: id }, { key: additionalMetaKeys_1.AdditionalMetaKeys.VERSION, value: this.currentPackageVersion }];
                var signalManagerDataModelMeta = new meta_1.Meta(dataTypeEnum_1.DataType.OBJECT, additionalMetaInfo);
                var categoriesMeta = new meta_1.Meta(dataTypeEnum_1.DataType.ARRAY, [{ key: additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE, value: arrayTypeEnum_1.ArrayType.LINK }]);
                var categoriesLinks_1 = new Array();
                var categoriesData = settings.getValue(this.categoriesSettingsKey);
                if (categoriesData !== undefined) {
                    categoriesData.forEach(function (settings) {
                        var _a;
                        var categoryPackageStructure = exportContainer_1.ExportContainer.createPackages(settings);
                        if (categoryPackageStructure.packages.length > 0 && !Number.isNaN(categoryPackageStructure.topLevelID)) {
                            categoriesLinks_1.push(categoryPackageStructure.topLevelID);
                            (_a = packageStructure.packages).push.apply(_a, categoryPackageStructure.packages);
                        }
                        else {
                            throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, _this.categoriesSettingsKey);
                        }
                    });
                    signalManagerDataModelData[DataIds.Categories] = new package_1.Package(categoriesMeta, categoriesLinks_1);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, this.categoriesSettingsKey);
                }
                var signalManagerDataModelPackage = new package_1.Package(signalManagerDataModelMeta, signalManagerDataModelData);
                packageStructure.packages.push(signalManagerDataModelPackage);
                packageStructure.topLevelID = id;
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_TYPE, this.settingsType);
            }
            return packageStructure;
        };
        return SignalManagerDataModelPackageAdapter;
    }());
    exports.SignalManagerDataModelPackageAdapter = SignalManagerDataModelPackageAdapter;
});
//# sourceMappingURL=data:application/json;base64,