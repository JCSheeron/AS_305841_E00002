define(["require", "exports", "../../../common/packageConversion/enum/objectTypeEnum", "../../../common/packageConversion/exportContainer", "../../../common/persistence/settings", "../../../common/packageConversion/enum/dataTypeEnum", "../../../common/packageConversion/enum/additionalMetaKeys", "../../../common/packageConversion/mceConversionError", "./settingIds", "../../../common/packageConversion/package", "../../../common/packageConversion/meta"], function (require, exports, objectTypeEnum_1, exportContainer_1, settings_1, dataTypeEnum_1, additionalMetaKeys_1, mceConversionError_1, settingIds_1, package_1, meta_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DataIds;
    (function (DataIds) {
        DataIds["SeriesId"] = "id";
        DataIds["SeriesName"] = "name";
        DataIds["SeriesColor"] = "color";
        DataIds["SeriesSignalData"] = "signalData";
        DataIds["SeriesCalculationData"] = "calculationData";
    })(DataIds || (DataIds = {}));
    var BaseSeriesPackageAdapter = /** @class */ (function () {
        function BaseSeriesPackageAdapter() {
            //newest version of package format
            this.currentPackageVersion = 1;
            this.settingsType = "BaseSeries";
            this.objectType = objectTypeEnum_1.ObjectType.BASESERIES;
        }
        BaseSeriesPackageAdapter.prototype.packageToSetting = function (packageData, container) {
            var _a, _b, _c;
            var setting = new settings_1.Settings(this.settingsType);
            if (((_a = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _a === void 0 ? void 0 : _a.dataType) == dataTypeEnum_1.DataType.OBJECT && ((_b = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _b === void 0 ? void 0 : _b[additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE]) == this.objectType) {
                switch ((_c = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _c === void 0 ? void 0 : _c[additionalMetaKeys_1.AdditionalMetaKeys.VERSION]) {
                    case 1:
                        setting = this.packageV1ToSetting(packageData, container);
                        break;
                    default:
                        throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.objectType);
                }
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_TYPE, this.objectType);
            }
            return setting;
        };
        BaseSeriesPackageAdapter.prototype.packageV1ToSetting = function (packageData, container) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
            var setting = new settings_1.Settings(this.settingsType);
            if (((_c = (_b = (_a = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _a === void 0 ? void 0 : _a[DataIds.SeriesId]) === null || _b === void 0 ? void 0 : _b.meta) === null || _c === void 0 ? void 0 : _c.dataType) == dataTypeEnum_1.DataType.STRING) {
                setting.setValue(settingIds_1.SettingIds.SeriesId, (_e = (_d = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _d === void 0 ? void 0 : _d[DataIds.SeriesId]) === null || _e === void 0 ? void 0 : _e.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.SeriesId);
            }
            if (((_h = (_g = (_f = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _f === void 0 ? void 0 : _f[DataIds.SeriesName]) === null || _g === void 0 ? void 0 : _g.meta) === null || _h === void 0 ? void 0 : _h.dataType) == dataTypeEnum_1.DataType.STRING) {
                setting.setValue(settingIds_1.SettingIds.SeriesName, (_k = (_j = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _j === void 0 ? void 0 : _j[DataIds.SeriesName]) === null || _k === void 0 ? void 0 : _k.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.SeriesName);
            }
            if (((_o = (_m = (_l = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _l === void 0 ? void 0 : _l[DataIds.SeriesColor]) === null || _m === void 0 ? void 0 : _m.meta) === null || _o === void 0 ? void 0 : _o.dataType) == dataTypeEnum_1.DataType.STRING) {
                setting.setValue(settingIds_1.SettingIds.SeriesColor, (_q = (_p = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _p === void 0 ? void 0 : _p[DataIds.SeriesColor]) === null || _q === void 0 ? void 0 : _q.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.SeriesColor);
            }
            if (((_s = (_r = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _r === void 0 ? void 0 : _r[DataIds.SeriesSignalData]) === null || _s === void 0 ? void 0 : _s.meta.dataType) == dataTypeEnum_1.DataType.LINK) {
                var id = (_u = (_t = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _t === void 0 ? void 0 : _t[DataIds.SeriesSignalData]) === null || _u === void 0 ? void 0 : _u.data;
                var signalDataSetting = container.getSettingsByID(id);
                if (signalDataSetting !== null) {
                    setting.setValue(settingIds_1.SettingIds.SeriesSignalData, signalDataSetting);
                }
            }
            else if (((_x = (_w = (_v = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _v === void 0 ? void 0 : _v[DataIds.SeriesCalculationData]) === null || _w === void 0 ? void 0 : _w.meta) === null || _x === void 0 ? void 0 : _x.dataType) == dataTypeEnum_1.DataType.LINK) {
                var id = (_z = (_y = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _y === void 0 ? void 0 : _y[DataIds.SeriesCalculationData]) === null || _z === void 0 ? void 0 : _z.data;
                var calculationDataInfoSetting = container.getSettingsByID(id);
                if (calculationDataInfoSetting !== undefined) {
                    setting.setValue(settingIds_1.SettingIds.SeriesCalculationData, calculationDataInfoSetting);
                }
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.SeriesSignalData + "/" + DataIds.SeriesCalculationData);
            }
            return setting;
        };
        BaseSeriesPackageAdapter.prototype.settingToPackage = function (settingsData) {
            var _a, _b;
            var settings = settings_1.Settings.create(settingsData);
            var seriesData = {};
            var packageStructure = {
                packages: new Array(),
                topLevelID: NaN
            };
            if (settings.type === this.settingsType) {
                var id = meta_1.Meta.createID();
                var additionalMetaInfo = [{ key: additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE, value: this.objectType }, { key: additionalMetaKeys_1.AdditionalMetaKeys.ID, value: id }, { key: additionalMetaKeys_1.AdditionalMetaKeys.VERSION, value: this.currentPackageVersion }];
                var seriesMeta = new meta_1.Meta(dataTypeEnum_1.DataType.OBJECT, additionalMetaInfo);
                var seriesIdData = settings.getValue(settingIds_1.SettingIds.SeriesId);
                if (seriesIdData !== undefined) {
                    seriesData[DataIds.SeriesId] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.STRING), seriesIdData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.SeriesId);
                }
                var seriesNameData = settings.getValue(settingIds_1.SettingIds.SeriesName);
                if (seriesNameData !== undefined) {
                    seriesData[DataIds.SeriesName] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.STRING), seriesNameData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.SeriesName);
                }
                var seriesColorData = settings.getValue(settingIds_1.SettingIds.SeriesColor);
                if (seriesColorData !== undefined) {
                    seriesData[DataIds.SeriesColor] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.STRING), seriesColorData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.SeriesColor);
                }
                var seriesSignalDataData = settings.getValue(settingIds_1.SettingIds.SeriesSignalData);
                var seriesCalculationDataInfoData = settings.getValue(settingIds_1.SettingIds.SeriesCalculationData);
                if (seriesSignalDataData !== undefined) {
                    var signalDataPackageStructure = exportContainer_1.ExportContainer.createPackages(seriesSignalDataData);
                    if (signalDataPackageStructure.packages.length > 0 && !Number.isNaN(signalDataPackageStructure.topLevelID)) {
                        seriesData[DataIds.SeriesSignalData] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.LINK), signalDataPackageStructure.topLevelID);
                        (_a = packageStructure.packages).push.apply(_a, signalDataPackageStructure.packages);
                    }
                    else {
                        throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.SeriesSignalData + "/" + seriesCalculationDataInfoData);
                    }
                }
                else if (seriesCalculationDataInfoData !== undefined) {
                    var calculationDataInfoPackageStructure = exportContainer_1.ExportContainer.createPackages(seriesCalculationDataInfoData);
                    if (calculationDataInfoPackageStructure.packages.length > 0 && !Number.isNaN(calculationDataInfoPackageStructure.topLevelID)) {
                        seriesData[DataIds.SeriesCalculationData] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.LINK), calculationDataInfoPackageStructure.topLevelID);
                        (_b = packageStructure.packages).push.apply(_b, calculationDataInfoPackageStructure.packages);
                    }
                    else {
                        throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.SeriesSignalData + "/" + seriesCalculationDataInfoData);
                    }
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, settingIds_1.SettingIds.SeriesSignalData + "/" + seriesCalculationDataInfoData);
                }
                var seriesPackage = new package_1.Package(seriesMeta, seriesData);
                packageStructure.packages.push(seriesPackage);
                packageStructure.topLevelID = id;
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.settingsType);
            }
            return packageStructure;
        };
        return BaseSeriesPackageAdapter;
    }());
    exports.BaseSeriesPackageAdapter = BaseSeriesPackageAdapter;
});
//# sourceMappingURL=data:application/json;base64,