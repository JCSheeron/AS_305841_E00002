define(["require", "exports", "../../common/packageConversion/enum/objectTypeEnum", "../../common/persistence/settings", "../../common/packageConversion/enum/additionalMetaKeys", "../../common/packageConversion/enum/dataTypeEnum", "../../common/packageConversion/mceConversionError", "./signalManagerDataModelSettingIds", "../../common/packageConversion/meta", "../../common/packageConversion/enum/arrayTypeEnum", "../../common/packageConversion/package"], function (require, exports, objectTypeEnum_1, settings_1, additionalMetaKeys_1, dataTypeEnum_1, mceConversionError_1, signalManagerDataModelSettingIds_1, meta_1, arrayTypeEnum_1, package_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DataIds;
    (function (DataIds) {
        DataIds["ContainerName"] = "containerName";
        DataIds["SerieGroupStartTriggerTime"] = "startTriggerTime";
        DataIds["SeriesIds"] = "seriesIds";
    })(DataIds || (DataIds = {}));
    var SerieGroupPackageAdapter = /** @class */ (function () {
        function SerieGroupPackageAdapter() {
            //newest version of package format
            this.currentPackageVersion = 1;
            this.settingsType = "SerieGroup";
            this.objectType = objectTypeEnum_1.ObjectType.SERIEGROUP;
        }
        SerieGroupPackageAdapter.prototype.packageToSetting = function (packageData, container) {
            var _a, _b, _c;
            var setting = new settings_1.Settings(this.settingsType);
            if (((_a = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _a === void 0 ? void 0 : _a.dataType) == dataTypeEnum_1.DataType.OBJECT && ((_b = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _b === void 0 ? void 0 : _b[additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE]) == this.objectType) {
                switch ((_c = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _c === void 0 ? void 0 : _c[additionalMetaKeys_1.AdditionalMetaKeys.VERSION]) {
                    case 1:
                        setting = this.packageV1ToSetting(packageData, container);
                        break;
                    default:
                        throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.objectType);
                }
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_TYPE, this.objectType);
            }
            return setting;
        };
        SerieGroupPackageAdapter.prototype.packageV1ToSetting = function (packageData, container) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
            var setting = new settings_1.Settings(this.settingsType);
            if (((_c = (_b = (_a = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _a === void 0 ? void 0 : _a[DataIds.ContainerName]) === null || _b === void 0 ? void 0 : _b.meta) === null || _c === void 0 ? void 0 : _c.dataType) === dataTypeEnum_1.DataType.STRING) {
                setting.setValue(signalManagerDataModelSettingIds_1.SettingIds.ContainerName, (_e = (_d = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _d === void 0 ? void 0 : _d[DataIds.ContainerName]) === null || _e === void 0 ? void 0 : _e.data);
            }
            if (((_h = (_g = (_f = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _f === void 0 ? void 0 : _f[DataIds.SerieGroupStartTriggerTime]) === null || _g === void 0 ? void 0 : _g.meta) === null || _h === void 0 ? void 0 : _h.dataType) === dataTypeEnum_1.DataType.NUMBER) {
                setting.setValue(signalManagerDataModelSettingIds_1.SettingIds.SerieGroupStartTriggerTime, (_k = (_j = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _j === void 0 ? void 0 : _j[DataIds.SerieGroupStartTriggerTime]) === null || _k === void 0 ? void 0 : _k.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.SerieGroupStartTriggerTime);
            }
            if (((_o = (_m = (_l = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _l === void 0 ? void 0 : _l[DataIds.SeriesIds]) === null || _m === void 0 ? void 0 : _m.meta) === null || _o === void 0 ? void 0 : _o.dataType) === dataTypeEnum_1.DataType.ARRAY && ((_r = (_q = (_p = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _p === void 0 ? void 0 : _p[DataIds.SeriesIds]) === null || _q === void 0 ? void 0 : _q.meta) === null || _r === void 0 ? void 0 : _r[additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE]) === arrayTypeEnum_1.ArrayType.STRING) {
                setting.setValue(signalManagerDataModelSettingIds_1.SettingIds.SeriesIds, (_t = (_s = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _s === void 0 ? void 0 : _s[DataIds.SeriesIds]) === null || _t === void 0 ? void 0 : _t.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.SeriesIds);
            }
            return setting;
        };
        SerieGroupPackageAdapter.prototype.settingToPackage = function (settingsData) {
            var settings = settings_1.Settings.create(settingsData);
            var serieGroupData = {};
            var packageStructure = {
                packages: new Array(),
                topLevelID: NaN
            };
            if (settings.type === this.settingsType) {
                var id = meta_1.Meta.createID();
                var additionalMetaInfo = [{ key: additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE, value: this.objectType }, { key: additionalMetaKeys_1.AdditionalMetaKeys.ID, value: id }, { key: additionalMetaKeys_1.AdditionalMetaKeys.VERSION, value: this.currentPackageVersion }];
                var seriesGroupMeta = new meta_1.Meta(dataTypeEnum_1.DataType.OBJECT, additionalMetaInfo);
                var containerNameData = settings.getValue(signalManagerDataModelSettingIds_1.SettingIds.ContainerName);
                if (containerNameData !== undefined) {
                    serieGroupData[DataIds.ContainerName] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.STRING), containerNameData);
                }
                var serieGroupStartTriggerTimeData = settings.getValue(signalManagerDataModelSettingIds_1.SettingIds.SerieGroupStartTriggerTime);
                if (serieGroupStartTriggerTimeData !== undefined) {
                    serieGroupData[DataIds.SerieGroupStartTriggerTime] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.NUMBER), serieGroupStartTriggerTimeData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, signalManagerDataModelSettingIds_1.SettingIds.SerieGroupStartTriggerTime);
                }
                var serieIdsData = settings.getValue(signalManagerDataModelSettingIds_1.SettingIds.SeriesIds);
                if (serieIdsData !== undefined) {
                    var serieIdsMeta = new meta_1.Meta(dataTypeEnum_1.DataType.ARRAY, [{ key: additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE, value: arrayTypeEnum_1.ArrayType.STRING }]);
                    serieGroupData[DataIds.SeriesIds] = new package_1.Package(serieIdsMeta, serieIdsData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, signalManagerDataModelSettingIds_1.SettingIds.SeriesIds);
                }
                var seriesGroupPackage = new package_1.Package(seriesGroupMeta, serieGroupData);
                packageStructure.packages.push(seriesGroupPackage);
                packageStructure.topLevelID = id;
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.settingsType);
            }
            return packageStructure;
        };
        return SerieGroupPackageAdapter;
    }());
    exports.SerieGroupPackageAdapter = SerieGroupPackageAdapter;
});
//# sourceMappingURL=data:application/json;base64,