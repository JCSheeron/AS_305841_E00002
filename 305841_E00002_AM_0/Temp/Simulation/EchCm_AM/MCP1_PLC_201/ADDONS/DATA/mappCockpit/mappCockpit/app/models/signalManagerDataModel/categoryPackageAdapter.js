define(["require", "exports", "../../common/packageConversion/enum/objectTypeEnum", "../../common/packageConversion/exportContainer", "../../common/persistence/settings", "../../common/packageConversion/enum/dataTypeEnum", "../../common/packageConversion/enum/additionalMetaKeys", "../../common/packageConversion/mceConversionError", "./signalManagerDataModelSettingIds", "../../common/packageConversion/enum/arrayTypeEnum", "../../common/packageConversion/package", "../../common/packageConversion/meta"], function (require, exports, objectTypeEnum_1, exportContainer_1, settings_1, dataTypeEnum_1, additionalMetaKeys_1, mceConversionError_1, signalManagerDataModelSettingIds_1, arrayTypeEnum_1, package_1, meta_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DataIds;
    (function (DataIds) {
        DataIds["SerieGroups"] = "serieGroups";
        DataIds["CategoryId"] = "id";
    })(DataIds || (DataIds = {}));
    var CategoryPackageAdapter = /** @class */ (function () {
        function CategoryPackageAdapter() {
            //newest version of package format
            this.currentPackageVersion = 1;
            this.settingsType = "category";
            this.objectType = objectTypeEnum_1.ObjectType.CATEGORY;
        }
        CategoryPackageAdapter.prototype.packageToSetting = function (packageData, container) {
            var _a, _b, _c;
            var setting = new settings_1.Settings(this.settingsType);
            if (((_a = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _a === void 0 ? void 0 : _a.dataType) === dataTypeEnum_1.DataType.OBJECT && ((_b = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _b === void 0 ? void 0 : _b[additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE]) === this.objectType) {
                switch ((_c = packageData === null || packageData === void 0 ? void 0 : packageData.meta) === null || _c === void 0 ? void 0 : _c[additionalMetaKeys_1.AdditionalMetaKeys.VERSION]) {
                    case 1:
                        setting = this.packageV1ToSetting(packageData, container);
                        break;
                    default:
                        throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.objectType);
                }
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_TYPE, this.objectType);
            }
            return setting;
        };
        CategoryPackageAdapter.prototype.packageV1ToSetting = function (packageData, container) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
            var setting = new settings_1.Settings(this.settingsType);
            if (((_c = (_b = (_a = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _a === void 0 ? void 0 : _a[DataIds.CategoryId]) === null || _b === void 0 ? void 0 : _b.meta) === null || _c === void 0 ? void 0 : _c.dataType) === dataTypeEnum_1.DataType.STRING) {
                setting.setValue(signalManagerDataModelSettingIds_1.SettingIds.CategoryId, (_e = (_d = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _d === void 0 ? void 0 : _d[DataIds.CategoryId]) === null || _e === void 0 ? void 0 : _e.data);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.CategoryId);
                ;
            }
            if (((_h = (_g = (_f = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _f === void 0 ? void 0 : _f[DataIds.SerieGroups]) === null || _g === void 0 ? void 0 : _g.meta) === null || _h === void 0 ? void 0 : _h.dataType) === dataTypeEnum_1.DataType.ARRAY && ((_l = (_k = (_j = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _j === void 0 ? void 0 : _j[DataIds.SerieGroups]) === null || _k === void 0 ? void 0 : _k.meta) === null || _l === void 0 ? void 0 : _l[additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE]) === arrayTypeEnum_1.ArrayType.LINK) {
                var serieGroupSettings_1 = new Array();
                var linkArray = (_o = (_m = packageData === null || packageData === void 0 ? void 0 : packageData.data) === null || _m === void 0 ? void 0 : _m[DataIds.SerieGroups]) === null || _o === void 0 ? void 0 : _o.data;
                if (linkArray !== undefined) {
                    linkArray.forEach(function (id) {
                        var serieGroupSetting = container.getSettingsByID(id);
                        if (serieGroupSetting !== null) {
                            serieGroupSettings_1.push(serieGroupSetting);
                        }
                        else {
                            throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.SerieGroups);
                        }
                    });
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.SerieGroups);
                }
                setting.setValue(signalManagerDataModelSettingIds_1.SettingIds.SerieGroups, serieGroupSettings_1);
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, DataIds.SerieGroups);
            }
            return setting;
        };
        CategoryPackageAdapter.prototype.settingToPackage = function (settingsData) {
            var settings = settings_1.Settings.create(settingsData);
            var categoryData = {};
            var packageStructure = {
                packages: new Array(),
                topLevelID: NaN
            };
            if (settings.type === this.settingsType) {
                var id = meta_1.Meta.createID();
                var additionalMetaKeys = [{ key: additionalMetaKeys_1.AdditionalMetaKeys.OBJECTTYPE, value: this.objectType }, { key: additionalMetaKeys_1.AdditionalMetaKeys.ID, value: id }, { key: additionalMetaKeys_1.AdditionalMetaKeys.VERSION, value: this.currentPackageVersion }];
                var categoryMeta = new meta_1.Meta(dataTypeEnum_1.DataType.OBJECT, additionalMetaKeys);
                var serieGroupsMeta = new meta_1.Meta(dataTypeEnum_1.DataType.ARRAY, [{ key: additionalMetaKeys_1.AdditionalMetaKeys.ARRAYTYPE, value: arrayTypeEnum_1.ArrayType.LINK }]);
                var serieGroupsLinks_1 = new Array();
                var serieGroupsData = settings.getValue(signalManagerDataModelSettingIds_1.SettingIds.SerieGroups);
                if (serieGroupsData !== undefined) {
                    serieGroupsData.forEach(function (serieGroupSetting) {
                        var _a;
                        var serieGroupPackageStructure = exportContainer_1.ExportContainer.createPackages(serieGroupSetting);
                        if (serieGroupPackageStructure.packages.length > 0 && !Number.isNaN(serieGroupPackageStructure.topLevelID)) {
                            serieGroupsLinks_1.push(serieGroupPackageStructure.topLevelID);
                            (_a = packageStructure.packages).push.apply(_a, serieGroupPackageStructure.packages);
                        }
                    });
                    categoryData[DataIds.SerieGroups] = new package_1.Package(serieGroupsMeta, serieGroupsLinks_1);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, signalManagerDataModelSettingIds_1.SettingIds.SerieGroups);
                }
                var categoryIdData = settings.getValue(signalManagerDataModelSettingIds_1.SettingIds.CategoryId);
                if (categoryIdData !== undefined) {
                    categoryData[DataIds.CategoryId] = new package_1.Package(new meta_1.Meta(dataTypeEnum_1.DataType.STRING), categoryIdData);
                }
                else {
                    throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.MISSING_DATA, signalManagerDataModelSettingIds_1.SettingIds.CategoryId);
                }
                var categoryPackage = new package_1.Package(categoryMeta, categoryData);
                packageStructure.packages.push(categoryPackage);
                packageStructure.topLevelID = id;
            }
            else {
                throw mceConversionError_1.MceConversionError.createErrorByType(mceConversionError_1.MceConversionErrorType.UNSUPPORTED_VERSION, this.settingsType);
            }
            return packageStructure;
        };
        return CategoryPackageAdapter;
    }());
    exports.CategoryPackageAdapter = CategoryPackageAdapter;
});
//# sourceMappingURL=data:application/json;base64,