<?xml version="1.0" encoding="utf-8"?>
<CompoundWidget id="GaMotAxisStatus" width="390" height="310"
  xmlns="http://www.br-automation.com/iat2015/contentDefinition/v2" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Widgets>
    <Widget xsi:type="widgets.brease.GroupBox" id="grpBoxAxisStatus" top="5" left="5" width="370" height="290" zIndex="0" text="Axis Status">
      <Widgets>
        <Widget xsi:type="widgets.brease.Label" id="lblRdyForPower" top="8" left="184" width="125" height="15" zIndex="0" text="Is Rdy For Power" padding="0px" />
        <Widget xsi:type="widgets.brease.Label" id="lblIsHomed" top="30" left="184" width="125" height="15" zIndex="1" text="Is Homed" padding="0px" />
        <Widget xsi:type="widgets.brease.Label" id="lblIsAtPos" top="119" left="184" width="125" height="15" zIndex="2" text="Is At Position" padding="0px" />
        <Widget xsi:type="widgets.brease.Label" id="lblIsMoveActive" top="97" left="184" width="125" height="15" zIndex="3" text="Is Move Active" padding="0px" />
        <Widget xsi:type="widgets.brease.Label" id="lblIsMoveDone" top="141" left="184" width="125" height="15" zIndex="4" text="Is Move Done" padding="0px" />
        <Widget xsi:type="widgets.brease.Label" id="lblIsStopped" top="163" left="184" width="125" height="15" zIndex="5" text="Is Stopped" padding="0px" />
        <Widget xsi:type="widgets.brease.Label" id="lblStatus" top="193" left="238" width="60" height="15" zIndex="6" text="Status" padding="0px" />
        <Widget xsi:type="widgets.brease.Label" id="lblState" top="218" left="238" width="60" height="15" zIndex="7" text="State" padding="0px" />
        <Widget xsi:type="widgets.brease.TextOutput" id="txtOutStatus" top="193" left="9" width="228" height="15" zIndex="8" value="STATUS" backColor="rgba(255, 255, 255, 0)" textAlign="right" />
        <Widget xsi:type="widgets.brease.TextOutput" id="txtOutState" top="218" left="9" width="228" height="15" zIndex="9" value="STATE" backColor="rgba(255, 255, 255, 0)" textAlign="right" />
        <Widget xsi:type="widgets.brease.TextOutput" id="txtOutRdyForPwr" top="5" left="139" width="30" height="20" zIndex="10" value="Y/N" backColor="rgba(255, 255, 255, 0)" textAlign="center" />
        <Widget xsi:type="widgets.brease.TextOutput" id="txtOutIsHomed" top="28" left="139" width="30" height="20" zIndex="11" value="Y/N" backColor="rgba(255, 255, 255, 0)" textAlign="center" />
        <Widget xsi:type="widgets.brease.TextOutput" id="txtOutIsMoveActive" top="95" left="139" width="30" height="20" zIndex="12" value="Y/N" backColor="rgba(255, 255, 255, 0)" textAlign="center" />
        <Widget xsi:type="widgets.brease.TextOutput" id="txtOutIsAtPos" top="118" left="139" width="30" height="20" zIndex="13" value="Y/N" backColor="rgba(255, 255, 255, 0)" textAlign="center" />
        <Widget xsi:type="widgets.brease.TextOutput" id="txtOutIsMoveDone" top="140" left="139" width="30" height="20" zIndex="14" value="Y/N" backColor="rgba(255, 255, 255, 0)" textAlign="center" />
        <Widget xsi:type="widgets.brease.TextOutput" id="txtOutIsStopped" top="163" left="139" width="30" height="20" zIndex="15" value="Y/N" backColor="rgba(255, 255, 255, 0)" textAlign="center" />
        <Widget xsi:type="widgets.brease.NumericOutput" id="numOutPosAct" top="93" left="14" width="120" height="15" zIndex="16" format="{'metric':{'decimalPlaces':3,'minimumIntegerDigits':1,'maximumIntegerDigits':4},'imperial':{'decimalPlaces':3,'minimumIntegerDigits':1,'maximumIntegerDigits':4},'imperial-us':{'decimalPlaces':3,'minimumIntegerDigits':1,'maximumIntegerDigits':4}}" unitAlign="right" textAlign="center" />
        <Widget xsi:type="widgets.brease.NumericOutput" id="numOutVelAct" top="148" left="14" width="120" height="15" zIndex="17" unitAlign="right" textAlign="center" />
        <Widget xsi:type="widgets.brease.Label" id="lblPosAct" top="68" left="34" height="15" zIndex="18" text="Position" textAlign="center" />
        <Widget xsi:type="widgets.brease.Label" id="lblVelAct" top="123" left="34" height="15" zIndex="19" text="Velocity" textAlign="center" />
        <Widget xsi:type="widgets.brease.Label" id="lblIsPoweredOn" top="52" left="184" width="125" height="15" zIndex="20" text="Is Enabled" padding="0px" />
        <Widget xsi:type="widgets.brease.TextOutput" id="txtOutIsPoweredOn" top="50" left="139" width="30" height="20" zIndex="21" value="Y/N" backColor="rgba(255, 255, 255, 0)" textAlign="center" />
        <Widget xsi:type="widgets.brease.Label" id="lblIsBrakeManRel" top="74" left="184" width="151" height="15" zIndex="22" text="Is Brake Man. Rel." padding="0px" />
        <Widget xsi:type="widgets.brease.TextOutput" id="txtOutIsBrakeManRel" top="73" left="139" width="30" height="20" zIndex="23" value="Y/N" backColor="rgba(255, 255, 255, 0)" textAlign="center" />
      </Widgets>
    </Widget>
  </Widgets>
  <Properties>
    
    <!-- Structure properties -->
    <!--
    Structure bindable property:
    <Property xsi:type="StructureBindableProperty" name="" type="" readOnly="" >
    <Description>Description will be shown in property grid.</Description>
    <Mappings>
    <Mapping widget="" type="" property="" mode="" memberPath="" mapToNode=""/>
    <Mapping widget="" type="" property="" mode="" memberPath="" mapToNode=""/>
    <Mapping widget="" type="" property="" mode="" memberPath="" mapToNode=""/>
    </Mappings>
    </Property>
    -->

    <!-- Axis status structure -->
    <Property xsi:type="StructureBindableProperty" name="StatusStruct" type="sMot_AxisStatus" category="Axis" readOnly="false" required="false" >
      <Description>Axis Status Structure Binding to sMot_AxisStatus structure</Description>
      <Mappings>
        <!-- The bools use list binding and widget properties to display text rather than a bool -->
        <!-- 
        <Mapping widget="txtOutRdyForPwr" property="value" type="String" mode="twoWay" memberPath="IsReadyToPowerOn" mapToNode="true" />
        <Mapping widget="txtOutEnabled" property="value" type="String" mode="twoWay" memberPath="IsPoweredOn" mapToNode="true" />
        <Mapping widget="txtOutIsMoveActive" property="value" type="String" mode="twoWay" memberPath="IsMoveActive" mapToNode="true" />
        <Mapping widget="txtOutIsAtPos" property="value" type="String" mode="twoWay" memberPath="IsInPosition" mapToNode="true" />
        <Mapping widget="txtOutIsMoveDone" property="value" type="String" mode="twoWay" memberPath="IsMoveDone" mapToNode="true" />
        <Mapping widget="txtOutIsStopped" property="value" type="String" mode="twoWay" memberPath="IsStopped" mapToNode="true" />
        <Mapping widget="txtOutStatus" property="value" type="String" mode="twoWay" memberPath="PlcOpenState" mapToNode="true" />
        -->
        <Mapping widget="numOutPosAct" property="node" type="Number" mode="twoWay" memberPath="Position" mapToNode="true" />
        <Mapping widget="numOutVelAct" property="node" type="Number" mode="twoWay" memberPath="Velocity" mapToNode="true" />
      </Mappings>
    </Property>
    <!-- Non-Bindable properties -->
    <!-- 
    Simple non bindable property:
    Property Attributes
    xsi:type: NonBindableProperty
    name: name of the property (not allowed: width, height, top, left, id, enable, visible, zindex, margin, premissionview, permissionoperate, description)
    <Property xsi:type="NonBindableProperty" name="" type="" defaultValue="" required="">
    <Description>Description will be shown in property grid.</Description>
    <Mappings>
    <Mapping widget="" property=""/>
    <Mapping widget="" property=""/>
    </Mappings>
    </Property>

    Required are xsi:type, name, type, and default value

    -->

    <!-- Bindable properties -->
    <!--
    Simple bindable property:
    <Property xsi:type="BindableProperty" name="" type="" defaultValue="" readOnly="" category="" localizable="" typeRefId="" nodeRefId="">
    <Description>Description will be shown in property grid.</Description>
    <Mappings>
    <Mapping widget="" property="" mode=""/>
    <Mapping widget="" property="" mode=""/>
    </Mappings>
    </Property>
    
    Required are xsi:type, name, type, and default value
    -->
    
    <!-- Set units for move params -->
    <Property xsi:type="BindableProperty" name="PositionUnits" type="String" defaultValue="" readOnly="false" category="Units">
      <Description>Set the unit string for position and distance units.</Description>
      <Mappings>
        <Mapping widget="numOutPosAct" property="unit" mode="oneWay"/>
      </Mappings>
    </Property>
     
    <Property xsi:type="BindableProperty" name="VelocityUnits" type="String" defaultValue="" readOnly="false" category="Units">
      <Description>Set the unit string for velocity units.</Description>
      <Mappings>
        <Mapping widget="numOutVelAct" property="unit" mode="oneWay"/>
      </Mappings>
    </Property>

    <!-- Send in text strings as properties use in place of bool and status/state integer values; display human readable strings -->
    <!-- Add properties to hold style names; change the text color based on value -->
    <!-- Is Ready For Power -->
    <Property xsi:type="BindableProperty" name="IsReadyForPowerText" type="String" defaultValue="No" readOnly="false" category="Axis">
      <Description>Text display for boolean status</Description>
      <Mappings>
        <Mapping widget="txtOutRdyForPwr" property="value" mode="oneWay"/>
      </Mappings>
    </Property>
    <Property xsi:type="BindableProperty" name="IsReadyForPowerStyle" type="String" defaultValue="" readOnly="false" category="Appearance">
      <Description>Text style for boolean status</Description>
      <Mappings>
        <Mapping widget="txtOutRdyForPwr" property="style" mode="oneWay"/>
      </Mappings>
    </Property>

    <!-- Is Homed -->
    <Property xsi:type="BindableProperty" name="IsHomedText" type="String" defaultValue="No" readOnly="false" category="Axis">
      <Description>Text display for boolean status</Description>
      <Mappings>
        <Mapping widget="txtOutIsHomed" property="value" mode="oneWay"/>
      </Mappings>
    </Property>
    <Property xsi:type="BindableProperty" name="IsHomedStyle" type="String" defaultValue="" readOnly="false" category="Appearance">
      <Description>Text style for boolean status</Description>
      <Mappings>
        <Mapping widget="txtOutIsHomed" property="style" mode="oneWay"/>
      </Mappings>
    </Property>

    <!-- Is Powered On (Enabled) -->
    <Property xsi:type="BindableProperty" name="IsPoweredOnText" type="String" defaultValue="No" readOnly="false" category="Axis">
      <Description>Text display for boolean status</Description>
      <Mappings>
        <Mapping widget="txtOutIsPoweredOn" property="value" mode="oneWay"/>
      </Mappings>
    </Property>
    <Property xsi:type="BindableProperty" name="IsPoweredOnStyle" type="String" defaultValue="" readOnly="false" category="Appearance">
      <Description>Text style for boolean status</Description>
      <Mappings>
        <Mapping widget="txtOutIsPoweredOn" property="style" mode="oneWay"/>
      </Mappings>
    </Property>

    <!-- Is Brake Manually Released -->
    <Property xsi:type="BindableProperty" name="IsBrakeManRelText" type="String" defaultValue="No" readOnly="false" category="Axis">
      <Description>Text display for boolean status</Description>
      <Mappings>
        <Mapping widget="txtOutIsBrakeManRel" property="value" mode="oneWay"/>
      </Mappings>
    </Property>
    <Property xsi:type="BindableProperty" name="IsBrakeManRelStyle" type="String" defaultValue="" readOnly="false" category="Appearance">
      <Description>Text style for boolean status</Description>
      <Mappings>
        <Mapping widget="txtOutIsBrakeManRel" property="style" mode="oneWay"/>
      </Mappings>
    </Property>

    <!-- Is Move Active -->
    <Property xsi:type="BindableProperty" name="IsMoveActiveText" type="String" defaultValue="No" readOnly="false" category="Axis">
      <Description>Text display for boolean status</Description>
      <Mappings>
        <Mapping widget="txtOutIsMoveActive" property="value" mode="oneWay"/>
      </Mappings>
    </Property>
    <Property xsi:type="BindableProperty" name="IsMoveActiveStyle" type="String" defaultValue="" readOnly="false" category="Appearance">
      <Description>Text style for boolean status</Description>
      <Mappings>
        <Mapping widget="txtOutIsMoveActive" property="style" mode="oneWay"/>
      </Mappings>
    </Property>

    <!-- Is At Position -->
    <Property xsi:type="BindableProperty" name="IsAtPositionText" type="String" defaultValue="No" readOnly="false" category="Axis">
      <Description>Text display for boolean status</Description>
      <Mappings>
        <Mapping widget="txtOutIsAtPos" property="value" mode="oneWay"/>
      </Mappings>
    </Property>
    <Property xsi:type="BindableProperty" name="IsAtPositionStyle" type="String" defaultValue="" readOnly="false" category="Appearance">
      <Description>Text style for boolean status</Description>
      <Mappings>
        <Mapping widget="txtOutIsAtPos" property="style" mode="oneWay"/>
      </Mappings>
    </Property>

    <!-- Is Move Done -->
    <Property xsi:type="BindableProperty" name="IsMoveDoneText" type="String" defaultValue="No" readOnly="false" category="Axis">
      <Description>Text display for boolean status</Description>
      <Mappings>
        <Mapping widget="txtOutIsMoveDone" property="value" mode="oneWay"/>
      </Mappings>
    </Property>
    <Property xsi:type="BindableProperty" name="IsMoveDoneStyle" type="String" defaultValue="" readOnly="false" category="Appearance">
      <Description>Text style for boolean status</Description>
      <Mappings>
        <Mapping widget="txtOutIsMoveDone" property="style" mode="oneWay"/>
      </Mappings>
    </Property>

    <!-- Is Stopped -->
    <Property xsi:type="BindableProperty" name="IsStoppedText" type="String" defaultValue="No" readOnly="false" category="Axis">
      <Description>Text display for boolean status</Description>
      <Mappings>
        <Mapping widget="txtOutIsStopped" property="value" mode="oneWay"/>
      </Mappings>
    </Property>
    <Property xsi:type="BindableProperty" name="IsStoppedStyle" type="String" defaultValue="" readOnly="false" category="Appearance">
      <Description>Text style for boolean status</Description>
      <Mappings>
        <Mapping widget="txtOutIsStopped" property="style" mode="oneWay"/>
      </Mappings>
    </Property>

    <!-- Display strings in place of status and state ints/enums -->
    <!-- PLC Open Status -->
    <Property xsi:type="BindableProperty" name="StatusText" type="String" defaultValue="Unknown" readOnly="false" category="Axis">
      <Description>Text display for integer status values.</Description>
      <Mappings>
        <Mapping widget="txtOutStatus" property="value" mode="oneWay"/>
      </Mappings>
    </Property>
    <Property xsi:type="BindableProperty" name="StatusStyle" type="String" defaultValue="" readOnly="false" category="Appearance">
      <Description>Text style for integer status values.</Description>
      <Mappings>
        <Mapping widget="txtOutStatus" property="style" mode="oneWay"/>
      </Mappings>
    </Property>

    <!-- Axis State Machine State -->
    <Property xsi:type="BindableProperty" name="StateText" type="String" defaultValue="Unknown" readOnly="false" category="Axis">
      <Description>Text display for integer state values.s</Description>
      <Mappings>
        <Mapping widget="txtOutState" property="value" mode="oneWay"/>
      </Mappings>
    </Property>
    <Property xsi:type="BindableProperty" name="StateStyle" type="String" defaultValue="" readOnly="false" category="Appearance">
      <Description>Text style for integer state values</Description>
      <Mappings>
        <Mapping widget="txtOutState" property="style" mode="oneWay"/>
      </Mappings>
    </Property>
    
  </Properties>

  <Events>
    <!--
    <Event name="">
    <Description>Description will be shown in property grid.</Description>
    <Mappings>
    <Mapping widget="" event="" />
    </Mappings>
    </Event>
    -->

  </Events>

  <Actions>
    <!--
    <Action name="">
    <Description>Description will be shown in property grid.</Description>
    <Mappings>
    <Mapping widget="" action="" />
    </Mappings>
    </Action>
    -->
  </Actions>

  <EventBindings>
    <!-- source and target can only be widgets within the compound widget.
    <EventBinding id="">
    <Source xsi:type="widget.Event" widgetRefId="" event="" />
    <EventHandler condition="">
    <Action>
    <Target xsi:type="widget.Action" widgetRefId="">
    <Method name="" value="" />
    </Target>
    </Action>
    </EventHandler>
    </EventBinding>
    -->
  </EventBindings>

</CompoundWidget>
