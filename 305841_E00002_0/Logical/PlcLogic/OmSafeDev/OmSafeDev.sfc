PROGRAM _CYCLIC
<?AutomationStudio FileVersion="4.9"?>
INITIAL_STEP Stp_Init:
(* @LANGUAGE := 'st' *)
// Set Operating State
operatingMode.OperatingMode := OM_INITIAL;

END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
TRANSITION EMO Cmd FROM Stp_Init TO Stp_EMOMode:=
(* @LANGUAGE := 'st' *)
// EStop command from safety plc H:Ok, L:EMO
NOT fs_EmoCmd
END_TRANSITION
(* @SFCNOJUMP := 'Stp_EMOMode' *)
TRANSITION keyswich in safe, not ok or bad SL or no mode req FROM Stp_Init TO Stp_SafeMode:=
(* @LANGUAGE := 'st' *)
// Keyswitch not in run or not okay
NOT fs_KeyswitchInRun OR
NOT fs_KeyswitchOk OR
// or not adequate security level
operatingMode.SecurityLevel = SL_UNKNOWN OR
operatingMode.SecurityLevel = SL_GUEST OR
// Or a mode isnt' being requested. 
// Go to safe initially if all else is okay so a mode must be chosen
operatingMode.ModeReqBits = 0
END_TRANSITION
(* @SFCNOJUMP := 'Stp_SafeMode' *)
TRANSITION keyswitch in run and SL FROM Stp_Init TO Stp_CheckModeReq:=
(* @LANGUAGE := 'st' *)
// Keyswitch in run and adequate security level
fs_KeyswitchInRun AND
fs_KeyswitchOk AND
operatingMode.SecurityLevel >= SL_OPERATOR AND
// and a mode is requested
(
((operatingMode.ModeReqBits AND OM_MANUAL_MODE) <> 0) OR
((operatingMode.ModeReqBits AND OM_PENDANT_MODE) <> 0) OR
((operatingMode.ModeReqBits AND OM_PRODUCTION_MODE) <> 0)
)

END_TRANSITION
(* @SFCNOJUMP := 'Stp_CheckModeReq' *)
STEP Stp_CheckModeReq:
(* @LANGUAGE := 'st' *)
// This is a transition state. The state machine should not stay here, so don't 
// set the mode upon entry. The mode in fact cannot be changed, as the current value is
// is used to transition back into the same state if a request was made but not granted
// for example production mode req but gate isn't shut.

// Clear reqs that may result in motion or physical changes to an axis
ClearMotionReqs;
// Clear other requests
ClearNonMotionReqs;

// Axis permit and other permissives
OtherModeAxisPermits;
ModeIndependentPermissions;
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
EXIT_ACTION
(* @LANGUAGE := 'st' *)
// Clear the request bits when leaving
operatingMode.ModeReqBits := 0;
END_ACTION
TRANSITION EMO Cmd FROM Stp_CheckModeReq TO Stp_EMOMode:=
(* @LANGUAGE := 'st' *)
// EStop command from safety plc H:Ok, L:EMO
NOT fs_EmoCmd
END_TRANSITION
(* @SFCISJUMP := 'Stp_EMOMode' *)
TRANSITION key not in run or bad SL or prod mode but not allowed FROM Stp_CheckModeReq TO Stp_SafeMode:=
(* @LANGUAGE := 'st' *)
// Keyswitch not in run or not okay, or not adequate security level
NOT fs_KeyswitchInRun OR
NOT fs_KeyswitchOk OR
operatingMode.SecurityLevel = SL_UNKNOWN OR
operatingMode.SecurityLevel = SL_GUEST OR
// or requested production mode but the gate isn't closed, so stay here in safe mode
(((operatingMode.ModeReqBits AND OM_PRODUCTION_MODE) <> 0) AND NOT fs_CfGateClosed AND operatingMode.OperatingMode = OM_SAFE_MODE)


END_TRANSITION
(* @SFCNOJUMP := 'Stp_SafeMode' *)
TRANSITION req manual mode or prod mode but not allowed FROM Stp_CheckModeReq TO Stp_ManualMode:=
(* @LANGUAGE := 'st' *)
// Keyswitch in run and adequate security level
fs_KeyswitchInRun AND
fs_KeyswitchOk AND
operatingMode.SecurityLevel >= SL_OPERATOR AND
(
// Req Manual Mode
((operatingMode.ModeReqBits AND OM_MANUAL_MODE) <> 0) OR
// or requested production mode but the gate isn't closed, so stay here in manual mode
(((operatingMode.ModeReqBits AND OM_PRODUCTION_MODE) <> 0) AND NOT fs_CfGateClosed AND operatingMode.OperatingMode = OM_MANUAL_MODE)
)

END_TRANSITION
(* @SFCNOJUMP := 'Stp_ManualMode' *)
STEP Stp_ManualMode:
(* @LANGUAGE := 'st' *)
// Block mode request for current mode, but keep the others
// This prevents it from being seen as a request
operatingMode.ModeReqBits := operatingMode.ModeReqBits AND NOT OM_MANUAL_MODE; (* bit 4 clear *)

// Axis permit and other permissives
ManualModeAxisPermits;
ModeIndependentPermissions;

// Pulse the Reset SafeMC on request.
// This allows the reset of the safety enable instructions in the 
// SafePLC while the system is not in EMO mode.
// The SafeMC reset sometimes isn't effective unless the axis is otherwise allowed to be powered.
tmrResetPulse(IN:= operatingMode.ReqEmoReset);
ts_ResetSafeMC := tmrResetPulse.Q;
operatingMode.ReqEmoReset := FALSE;

// Clear production start/stop cycle
operatingMode.ReqCycleStart := FALSE;
operatingMode.ReqCycleStop := FALSE;
operatingMode.HmiReqCycleStart := FALSE;
operatingMode.HmiReqCycleStop:= FALSE;

// Process manual requests
// Inputs set in init. This fb looks for a rising edge on the HMI move request, and 
// one-shots the axis move requests. It is inteneded to be run on every scan,
// at least while in manual mode.
procManualAxisReqsSpindle(); 
procManualAxisReqsOutE(); 
procManualAxisReqsInE(); 
procManualAxisReqsZ(); 
procManualAxisReqsHw();
procManualAxisReqsCfVfd();
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
ENTRY_ACTION
(* @LANGUAGE := 'st' *)
// Set Operating State
operatingMode.OperatingMode := OM_MANUAL_MODE;
// To Safety PLC
ts_InManualMode := TRUE;

// Reset pulse timer
tmrResetPulse(IN:= FALSE, PT:= timeResetPulse);

// Clear reqs that may result in motion or physical changes to an axis
ClearMotionReqs;
// Clear other requests
ClearNonMotionReqs;

// Init fb with low reqs so rising edge detection is ready
procManualAxisReqsSpindle(); 
procManualAxisReqsOutE(); 
procManualAxisReqsInE(); 
procManualAxisReqsZ(); 
procManualAxisReqsHw();
procManualAxisReqsCfVfd();
END_ACTION
EXIT_ACTION
(* @LANGUAGE := 'st' *)
// To Safety PLC
ts_InManualMode := FALSE;

// Clear reqs that may result in motion or physical changes to an axis
ClearMotionReqs;
// Clear other requests
ClearNonMotionReqs;

// Init fb with low reqs so rising edge detection is ready
procManualAxisReqsSpindle(); 
procManualAxisReqsOutE(); 
procManualAxisReqsInE(); 
procManualAxisReqsZ(); 
procManualAxisReqsHw();
procManualAxisReqsCfVfd();
END_ACTION
TRANSITION EMO Cmd FROM Stp_ManualMode TO Stp_EMOMode:=
(* @LANGUAGE := 'st' *)
// EStop command from safety plc H:Ok, L:EMO
NOT fs_EmoCmd
END_TRANSITION
(* @SFCISJUMP := 'Stp_EMOMode' *)
TRANSITION key not in run or bad SL FROM Stp_ManualMode TO Stp_SafeMode:=
(* @LANGUAGE := 'st' *)
// Keyswitch not in run or not okay, or not adequate security level
NOT fs_KeyswitchInRun OR
NOT fs_KeyswitchOk OR
operatingMode.SecurityLevel = SL_UNKNOWN OR
operatingMode.SecurityLevel = SL_GUEST
END_TRANSITION
(* @SFCNOJUMP := 'Stp_SafeMode' *)
TRANSITION req mode change FROM Stp_ManualMode TO Stp_CheckModeReq:=
(* @LANGUAGE := 'st' *)
// Keyswitch in run and adequate security level
fs_KeyswitchInRun AND
fs_KeyswitchOk AND
operatingMode.SecurityLevel >= SL_OPERATOR AND
// Req mode change (req other than current mode)
operatingMode.ModeReqBits <> 0 AND
((operatingMode.ModeReqBits AND OM_MANUAL_MODE) = 0)

END_TRANSITION
(* @SFCISJUMP := 'Stp_CheckModeReq' *)
TRANSITION req pendant mode or prod mode but not allowed FROM Stp_CheckModeReq TO Stp_PendantMode:=
(* @LANGUAGE := 'st' *)
// Keyswitch in run and adequate security level
fs_KeyswitchInRun AND
fs_KeyswitchOk AND
operatingMode.SecurityLevel >= SL_OPERATOR AND
(
// Req Pendant Mode
((operatingMode.ModeReqBits AND OM_PENDANT_MODE) <> 0) OR
// or requested production mode but the gate isn't closed, so stay here in pendant mode
(((operatingMode.ModeReqBits AND OM_PRODUCTION_MODE) <> 0) AND NOT fs_CfGateClosed AND operatingMode.OperatingMode = OM_PENDANT_MODE)
)

END_TRANSITION
(* @SFCNOJUMP := 'Stp_PendantMode' *)
STEP Stp_PendantMode:
(* @LANGUAGE := 'st' *)
// Block mode request for current mode, but keep the others
// This prevents it from being seen as a request
operatingMode.ModeReqBits := operatingMode.ModeReqBits AND NOT OM_PENDANT_MODE; (* bit 5 clear *)

// Axis permit and other permissives
PendantModeAxisPermits;
ModeIndependentPermissions;

// Clear process reqs
ClearProcessReqs;

// Pulse the Reset SafeMC on request.
// This allows the reset of the safety enable instructions in the 
// SafePLC while the system is not in EMO mode.
// The SafeMC reset sometimes isn't effective unless the axis is otherwise allowed to be powered.
tmrResetPulse(IN:= operatingMode.ReqEmoReset);
ts_ResetSafeMC := tmrResetPulse.Q;
operatingMode.ReqEmoReset := FALSE;

// Clear production start/stop cycle
operatingMode.ReqCycleStart := FALSE;
operatingMode.ReqCycleStop := FALSE;
operatingMode.HmiReqCycleStart := FALSE;
operatingMode.HmiReqCycleStop:= FALSE;

// Use the gear ratio coming from the pendant for the hmi request strucure. 
// It is the hmi request structure values that will get sent to the axis.
hmiLibraryAxisReqs[AD_HANDWHEEL].gearRatioNumerator := owsPendant.GearRatioNumerator;
hmiLibraryAxisReqs[AD_HANDWHEEL].gearRatioDenominator := owsPendant.GearRatioDenominator;

// Process manual requests -- Allow these in pendant mode.
// Inputs set in init. This fb looks for a rising edge on the HMI move request, and 
// one-shots the axis move requests. It is inteneded to be run on every scan,
// at least while in manual mode.
procManualAxisReqsSpindle(); 
procManualAxisReqsOutE(); 
procManualAxisReqsInE(); 
procManualAxisReqsZ(); 
procManualAxisReqsHw();
procManualAxisReqsCfVfd();

END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
ENTRY_ACTION
(* @LANGUAGE := 'st' *)
// Set Operating State
operatingMode.OperatingMode := OM_PENDANT_MODE;
// To Safety PLC
ts_InPendantMode := TRUE; 

// Reset pulse timer
tmrResetPulse(IN:= FALSE, PT:= timeResetPulse);

// Disable enabled axes on entry into pendant mode -- allows starting from the same point
FOR axisNo := 1 TO AXIS_COUNT DO
  axes[axisNo].Commands.DisableReq := axes[axisNo].Status.IsPoweredOn;
END_FOR;

// Clear reqs that may result in motion or physical changes to an axis
ClearMotionReqs;
// Clear other requests
ClearNonMotionReqs;

// Init fb with low reqs so rising edge detection is ready
procManualAxisReqsSpindle(); 
procManualAxisReqsOutE(); 
procManualAxisReqsInE(); 
procManualAxisReqsZ(); 
procManualAxisReqsHw();
procManualAxisReqsCfVfd();








END_ACTION
EXIT_ACTION
(* @LANGUAGE := 'st' *)
// To Safety PLC
ts_InPendantMode := FALSE;

// Clear reqs that may result in motion or physical changes to an axis
ClearMotionReqs;
// Clear other requests
ClearNonMotionReqs;

// Init fb with low reqs so rising edge detection is ready
procManualAxisReqsSpindle(); 
procManualAxisReqsOutE(); 
procManualAxisReqsInE(); 
procManualAxisReqsZ(); 
procManualAxisReqsHw();
procManualAxisReqsCfVfd();
END_ACTION
TRANSITION EMO Cmd FROM Stp_PendantMode TO Stp_EMOMode:=
(* @LANGUAGE := 'st' *)
// EStop command from safety plc H:Ok, L:EMO
NOT fs_EmoCmd
END_TRANSITION
(* @SFCISJUMP := 'Stp_EMOMode' *)
TRANSITION key not in run or bad SL FROM Stp_PendantMode TO Stp_SafeMode:=
(* @LANGUAGE := 'st' *)
// Keyswitch not in run or not okay, or not adequate security level
NOT fs_KeyswitchInRun OR
NOT fs_KeyswitchOk OR
operatingMode.SecurityLevel = SL_UNKNOWN OR
operatingMode.SecurityLevel = SL_GUEST
END_TRANSITION
(* @SFCNOJUMP := 'Stp_SafeMode' *)
TRANSITION req mode change FROM Stp_PendantMode TO Stp_CheckModeReq:=
(* @LANGUAGE := 'st' *)
// Keyswitch in run and adequate security level
fs_KeyswitchInRun AND
fs_KeyswitchOk AND
operatingMode.SecurityLevel >= SL_OPERATOR AND
// Req mode change (req other than current mode)
operatingMode.ModeReqBits <> 0 AND
(operatingMode.ModeReqBits AND OM_PENDANT_MODE) = 0

END_TRANSITION
(* @SFCISJUMP := 'Stp_CheckModeReq' *)
TRANSITION req production mode FROM Stp_CheckModeReq TO Stp_ProductionMode:=
(* @LANGUAGE := 'st' *)
// Keyswitch in run and adequate security level
fs_KeyswitchInRun AND
fs_KeyswitchOk AND
operatingMode.SecurityLevel >= SL_OPERATOR AND
// Req Production Mode
((operatingMode.ModeReqBits AND OM_PRODUCTION_MODE) <> 0) AND
// gate must be closed for production mode
fs_CfGateClosed
END_TRANSITION
(* @SFCNOJUMP := 'Stp_ProductionMode' *)
STEP Stp_ProductionMode:
(* @LANGUAGE := 'st' *)
// Block mode request for current mode, but keep the others
// This prevents it from being seen as a request
operatingMode.ModeReqBits := operatingMode.ModeReqBits AND NOT OM_PRODUCTION_MODE; (* bit 6 clear *)

// Axis permit and other permissives
ProductionModeAxisPermits;
ModeIndependentPermissions;

// Decode HMI Submode
operatingMode.SubMode := fctDecodeHmiSubMode(operatingMode.HmiSubMode);

// Pulse the Reset SafeMC on request.
// This allows the reset of the safety enable instructions in the 
// SafePLC while the system is not in EMO mode.
// The SafeMC reset sometimes isn't effective unless the axis is otherwise allowed to be powered.
tmrResetPulse(IN:= operatingMode.ReqEmoReset);
ts_ResetSafeMC := tmrResetPulse.Q;
operatingMode.ReqEmoReset := FALSE;

// In production mode, cycle start/stop on PB or HMI Req, or on cycle permissives not allowed to run
// Cycle Stop
// Stop PB held in or not okay keeps req stop high - blocking the start
tmrReqStopPulse(IN:= operatingMode.HmiReqCycleStop, PT:= T#500ms);
operatingMode.ReqCycleStop := (NOT fs_StopPbOk OR NOT fs_StopPbActive OR NOT cyclePermissives.allowCycleRun) OR tmrReqStopPulse.Q; // PB is L=stop
operatingMode.HmiReqCycleStop :=FALSE;

// Cycle Start
// Stop wins if start and stop are both active.
// Start on not stop and hmi or PB press and PB Okay.
// Start PB needs to be released to get a second pulse
tmrReqStartPulse(IN:= ((operatingMode.HmiReqCycleStart OR (fs_StartPbOk AND fs_StartPbActive)) AND cyclePermissives.allowCycleRun), PT:= T#20ms);
operatingMode.ReqCycleStart := NOT operatingMode.ReqCycleStop AND tmrReqStartPulse.Q; 
operatingMode.HmiReqCycleStart :=FALSE;

// process the process requests
procHmiProcessReqs();
END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
ENTRY_ACTION
(* @LANGUAGE := 'st' *)
// Set Operating State
operatingMode.OperatingMode := OM_PRODUCTION_MODE;
// To Safety PLC
ts_InProductionMode := TRUE;

// Clear process reqs on entry -- just in case one is spuriously set
ClearProcessReqs;

// Reset pulse timer
tmrResetPulse(IN:= FALSE, PT:= timeResetPulse);
END_ACTION
EXIT_ACTION
(* @LANGUAGE := 'st' *)
// To Safety PLC
ts_InProductionMode := FALSE;
END_ACTION
TRANSITION EMO Cmd FROM Stp_ProductionMode TO Stp_EMOMode:=
(* @LANGUAGE := 'st' *)
// EStop command from safety plc H:Ok, L:EMO
NOT fs_EmoCmd
END_TRANSITION
(* @SFCISJUMP := 'Stp_EMOMode' *)
TRANSITION key not in run or bad SL FROM Stp_ProductionMode TO Stp_SafeMode:=
(* @LANGUAGE := 'st' *)
// Keyswitch not in run or not okay, or not adequate security level
NOT fs_KeyswitchInRun OR
NOT fs_KeyswitchOk OR
operatingMode.SecurityLevel = SL_UNKNOWN OR
operatingMode.SecurityLevel = SL_GUEST
END_TRANSITION
(* @SFCNOJUMP := 'Stp_SafeMode' *)
TRANSITION req mode change FROM Stp_ProductionMode TO Stp_CheckModeReq:=
(* @LANGUAGE := 'st' *)
// Keyswitch in run and adequate security level
fs_KeyswitchInRun AND
fs_KeyswitchOk AND
operatingMode.SecurityLevel >= SL_OPERATOR AND
// Req mode change (req other than current mode)
operatingMode.ModeReqBits <> 0 AND
(operatingMode.ModeReqBits AND OM_PRODUCTION_MODE) = 0

END_TRANSITION
(* @SFCISJUMP := 'Stp_CheckModeReq' *)
STEP Stp_SafeMode:
(* @LANGUAGE := 'st' *)
// Clear mode requests if not ready to leave -- this guards against a lingering req 
// being acted on long after it was issued, once conditions become okay to leave
IF NOT fs_KeyswitchInRun OR 
    NOT fs_KeyswitchOk OR
    operatingMode.SecurityLevel < SL_OPERATOR THEN // OR
    // NOT fs_CfGateClosed THEN
  operatingMode.ModeReqBits := 16#0;
END_IF;

// Clear reqs that may result in motion or physical changes to an axis
ClearMotionReqs;
// Allow the other reqs (resets and set limits) 

// Axis permit and other permissives
OtherModeAxisPermits;
ModeIndependentPermissions;

// Clear the other HMI Reqs
ClearCycleReqs;

END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
ENTRY_ACTION
(* @LANGUAGE := 'st' *)
// Set Operating State
operatingMode.OperatingMode := OM_SAFE_MODE;
// To Safety PLC
ts_InSafeMode := TRUE;
// Initially clear the mode requests.
// They will be allowed once in the mode, and the keyswitch is in the run position
operatingMode.ModeReqBits := 16#0;

END_ACTION
EXIT_ACTION
(* @LANGUAGE := 'st' *)
// To Safety PLC
ts_InSafeMode := FALSE;
END_ACTION
TRANSITION EMO or Run and Mode Req FROM Stp_SafeMode TO Stp_CheckModeReq:=
(* @LANGUAGE := 'st' *)
// EStop command from safety plc H:Ok, L:EMO
NOT fs_EmoCmd OR
(  
// Keyswitch in run and adequate security level
fs_KeyswitchInRun AND
fs_KeyswitchOk AND
operatingMode.SecurityLevel >= SL_OPERATOR AND
// Req Another Mode
// Leaving out of safe or emo will lock the gate,
// but the latched check is for production mode only.
((operatingMode.ModeReqBits AND OM_MANUAL_MODE) <> 0) OR
((operatingMode.ModeReqBits AND OM_PENDANT_MODE) <> 0) OR
((operatingMode.ModeReqBits AND OM_PRODUCTION_MODE) <> 0)
)

END_TRANSITION
(* @SFCISJUMP := 'Stp_CheckModeReq' *)
STEP Stp_EMOMode:
(* @LANGUAGE := 'st' *)

// clear mode requests while in EMO
operatingMode.ModeReqBits := 16#0;

// Axis permit and other permissives
OtherModeAxisPermits;
ModeIndependentPermissions;

// Clear reqs that may result in motion or physical changes to an axis
ClearMotionReqs;
// Clear other requests
ClearNonMotionReqs;

// Block cycle start/stop req in Emo
operatingMode.ReqCycleStart := FALSE;
operatingMode.ReqCycleStop := FALSE;
// Clear the reqs, but allow the EMO/Axis Reset ... they get handled below
operatingMode.HmiReqCycleStart := FALSE;
operatingMode.HmiReqCycleStop := FALSE;

// Run emo allow timer
// Only allow resets to emo if this timer is expired.
// If an e-stop removes power from the drives, it is bad for the drive power supplies to be
// energized less than 2 minutes after being deenergized -- capacitor discharge/recharge issue
tmrEStopResetAllow(IN:= TRUE);

// Clear the EMO reset bit if within this time
IF NOT tmrEStopResetAllow.Q THEN
  operatingMode.ReqEmoReset := FALSE;
END_IF;

// Calc how many seconds remain before a reset is allowed
eStopResetAllowSecRemain := TIME_TO_DINT(timeEStopResetAllow - tmrEStopResetAllow.ET) / 1000;

// We can't leave this state until EMO is clear, but we need the reset pulse to clear the EMO.
// If a reset request is received, send a reset pulse to the safe controller. In the event of
// multiple emo events, this may or may not clear all of them, but the status on the HMI should
// be updated, allowing the operators to see what else is needed.
// Run the reset pulse and send the reset req
tmrResetPulse(IN:= operatingMode.ReqEmoReset, PT:= timeResetPulse);
ts_ResetEStop := tmrResetPulse.Q;
operatingMode.ReqEmoReset := FALSE;

END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
ENTRY_ACTION
(* @LANGUAGE := 'st' *)
// Set Operating State
operatingMode.OperatingMode := OM_EMO_MODE;

// To safety PLC
ts_InEmoMode := TRUE;

// Reset emo allow timer
tmrEStopResetAllow(IN:= FALSE, PT := timeEStopResetAllow);

END_ACTION
TRANSITION no emo, allow time done and reset req FROM Stp_EMOMode TO Stp_ResetAxes:=
(* @LANGUAGE := 'st' *)
// No more EMO, reset allow timer has expired, reset pulse is done
fs_EmoCmd AND
tmrEStopResetAllow.Q AND
// Use the reset pulse to the safe controller being done as time to leave instead of the request.
// This allows a request to create a pulse, and then be cleared. 
// Meanwhile, the EMO may or may not clear, and the reset pulse will go away. If the EMO is gone
// when the reset pulse goes away, we can leave.
NOT ts_ResetEStop
END_TRANSITION
(* @SFCNOJUMP := 'Stp_ResetAxes' *)
STEP Stp_ResetAxes:
(* @LANGUAGE := 'st' *)
// Clear mode requests while in EMO
operatingMode.ModeReqBits := 16#0;

// Run the reset pulse and send the reset req
tmrResetPulse(IN:= TRUE, PT:= timeResetPulse);
ts_ResetSafeMC := tmrResetPulse.Q;

END_STEP
(* @SFCMAXTIME := '' *)
(* @SFCMINTIME := '' *)
(* @SFCCOMMENT := '' *)
ENTRY_ACTION
(* @LANGUAGE := 'st' *)
// Reset pulse timer
tmrResetPulse(IN:= FALSE, PT:= timeResetPulse);
END_ACTION
EXIT_ACTION
(* @LANGUAGE := 'st' *)
// To safety PLC
ts_InEmoMode := FALSE;

// Clear reqs that may result in motion or physical changes to an axis
ClearMotionReqs;
// Clear other requests
ClearNonMotionReqs;

// Clear other reqs
ClearCycleReqs;


END_ACTION
TRANSITION axis reset pulse done FROM Stp_ResetAxes TO Stp_SafeMode:=
(* @LANGUAGE := 'st' *)
// Emo Reset pulse complete
tmrResetPulse.ET = tmrResetPulse.PT AND NOT ts_ResetSafeMC
END_TRANSITION
(* @SFCISJUMP := 'Stp_SafeMode' *)
END_PROGRAM
